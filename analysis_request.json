{
  "model": "qwen2.5-coder:32b",
  "prompt": "I need you to perform a comprehensive code analysis on the VoiceFlow Python project. This is a real-time voice transcription system with AI capabilities.\n\n## PROJECT CONTEXT:\n\nVoiceFlow is a modern Python-based AI voice transcription system that includes:\n- Real-time speech-to-text using OpenAI Whisper\n- System tray integration with visual indicators  \n- Push-to-talk hotkey system (Ctrl+Shift)\n- Modern src/voiceflow/ structure with pyproject.toml\n- Comprehensive test suite (7/7 smoke tests passing)\n\n## KNOWN ISSUES:\n1. Potential duplicate codebase (localflow/ vs src/voiceflow/)\n2. Import path inconsistencies\n3. Overly broad exception handling\n4. Resource management concerns (os._exit usage)\n\n## CODE ARCHITECTURE ANALYSIS REQUESTED:\n\nPlease analyze the following aspects:\n\n### 1. ARCHITECTURE & DESIGN QUALITY\n- Evaluate overall architecture patterns\n- Assess separation of concerns\n- Review module organization and dependencies\n- Check for design pattern adherence\n\n### 2. SECURITY VULNERABILITIES\n- Identify potential security risks\n- Review input validation and sanitization\n- Check for injection vulnerabilities\n- Assess privilege escalation risks\n- Review file system access patterns\n\n### 3. PERFORMANCE OPTIMIZATION\n- Identify performance bottlenecks\n- Review memory management and leaks\n- Assess threading and concurrency patterns\n- Check for unnecessary resource usage\n- Review algorithmic efficiency\n\n### 4. CODE QUALITY & MAINTAINABILITY\n- Evaluate code style and consistency\n- Review error handling patterns\n- Check for code duplication\n- Assess documentation quality\n- Review naming conventions\n\n### 5. TESTING STRATEGY\n- Evaluate test coverage and quality\n- Review test organization and patterns\n- Check for missing test scenarios\n- Assess integration and e2e testing\n\n### 6. SPECIFIC CONCERNS TO ADDRESS\n- Duplicate codebase analysis (localflow/ vs src/voiceflow/)\n- Import path inconsistencies\n- Exception handling improvements\n- Resource management (especially os._exit usage)\n- Thread safety and concurrency issues\n\n## DELIVERABLES REQUESTED:\n\n1. **PRIORITIZED IMPROVEMENT LIST** - Rank issues by severity and impact\n2. **SPECIFIC CODE EXAMPLES** - Show problematic code with suggested fixes\n3. **ARCHITECTURE RECOMMENDATIONS** - High-level structural improvements\n4. **SECURITY HARDENING STEPS** - Concrete security improvements\n5. **PERFORMANCE OPTIMIZATION PLAN** - Specific performance enhancements\n\nPlease provide detailed, actionable recommendations with file locations and code snippets where applicable.",
  "stream": false,
  "options": {
    "temperature": 0.1,
    "top_p": 0.9,
    "num_ctx": 8192
  }
}