# Docker Compose for VoiceFlow Testing Environment
version: '3.8'

services:
  # Main test runner
  test-runner:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    volumes:
      - ./test_results:/app/test_results
      - ./test_data:/app/test_data
      - ./performance_baseline.json:/app/performance_baseline.json:ro
    environment:
      - ENABLE_XVFB=true
      - PYTHONPATH=/app
      - TEST_DATABASE_URL=sqlite:///app/test_results/test.db
    depends_on:
      - test-database
    networks:
      - testing-network

  # Test database
  test-database:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=voiceflow_test
      - POSTGRES_USER=test_user
      - POSTGRES_PASSWORD=test_password
    volumes:
      - test_db_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - testing-network

  # Mock AI service for testing
  mock-ai-service:
    image: nginx:alpine
    volumes:
      - ./docker/mock-ai-responses.json:/usr/share/nginx/html/responses.json:ro
      - ./docker/mock-ai-nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "11434:80"
    networks:
      - testing-network

  # Performance monitoring
  performance-monitor:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - testing-network

  # Test result visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=testing123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana-datasources.yml:/etc/grafana/provisioning/datasources/datasources.yml:ro
      - ./docker/grafana-dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml:ro
    depends_on:
      - performance-monitor
    networks:
      - testing-network

  # Unit tests
  unit-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["unit"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - TEST_TYPE=unit
    networks:
      - testing-network

  # Integration tests
  integration-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["integration"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - TEST_TYPE=integration
    depends_on:
      - test-database
      - mock-ai-service
    networks:
      - testing-network

  # End-to-end tests
  e2e-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["e2e"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - TEST_TYPE=e2e
      - ENABLE_XVFB=true
    depends_on:
      - test-database
      - mock-ai-service
    networks:
      - testing-network

  # Performance tests
  performance-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["performance"]
    volumes:
      - ./test_results:/app/test_results
      - ./performance_baseline.json:/app/performance_baseline.json:ro
    environment:
      - TEST_TYPE=performance
    depends_on:
      - test-database
      - mock-ai-service
    networks:
      - testing-network

  # Security tests
  security-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["security"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - TEST_TYPE=security
    networks:
      - testing-network

  # Test analytics
  test-analytics:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["python", "test_analytics.py", "--generate-report", "--days", "30"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - ANALYTICS_DB_PATH=/app/test_results/analytics.db
    depends_on:
      - test-database
    networks:
      - testing-network

  # Load testing (optional, resource intensive)
  load-tests:
    build:
      context: .
      dockerfile: docker/test-runner.Dockerfile
    command: ["python", "test_orchestrator.py", "--types", "load", "--output-dir", "/app/test_results"]
    volumes:
      - ./test_results:/app/test_results
    environment:
      - TEST_TYPE=load
    profiles:
      - load-testing
    depends_on:
      - test-database
      - mock-ai-service
    networks:
      - testing-network

  # Test report server
  report-server:
    image: nginx:alpine
    ports:
      - "8080:80"
    volumes:
      - ./test_results:/usr/share/nginx/html:ro
      - ./docker/nginx-reports.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - test-analytics
    networks:
      - testing-network

volumes:
  test_db_data:
  grafana_data:

networks:
  testing-network:
    driver: bridge